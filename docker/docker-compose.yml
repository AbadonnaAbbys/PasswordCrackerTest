version: '3.8'

services:
  php:
    build:
      context: ./php # Собираем образ из папки php
      dockerfile: Dockerfile
    container_name: password-cracker-php
    ports:
      - "8000:8000" # Пробрасываем порт 8000 хоста на порт 8000 контейнера
    volumes:
      - ../src:/var/www/html # Монтируем папку src хоста в /var/www/html контейнера
    depends_on:
      - db # Зависимость от сервиса db
    environment:
      # Переменные окружения для подключения к базе данных
      MYSQL_HOST: db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: cracker_db

  db:
    image: mysql:8.0 # Используем официальный образ MySQL 8.0
    container_name: password-cracker-db
    ports:
      - "3306:3306" # Пробрасываем порт 3306 хоста на порт 3306 контейнера
    environment:
      # Переменные окружения для инициализации базы данных MySQL
      MYSQL_ROOT_PASSWORD: root_password # Пароль root пользователя
      MYSQL_DATABASE: cracker_db # Имя базы данных, которую создадим
      MYSQL_USER: user # Имя пользователя
      MYSQL_PASSWORD: password # Пароль пользователя
    volumes:
      # Создаем именованный том для сохранения данных базы данных
      - db_data:/var/lib/mysql
      # Копируем SQL файл в папку, из которой MySQL автоматически импортирует данные
      - ./mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

  worker:
    build:
      context: ./php # Используем тот же Dockerfile, что и для php-fpm, т.к. там уже есть PHP и все расширения
      dockerfile: Dockerfile
    container_name: password-cracker-worker
    volumes:
      - ../src:/var/www/html # Монтируем те же исходники
    depends_on:
      - db # Зависит от базы данных
    # Команда, которая запускает наш worker.php
    command: php /var/www/html/worker.php
    restart: always # Всегда перезапускать, если воркер упал

volumes:
  db_data: # Объявляем именованный том